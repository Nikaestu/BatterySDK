//
//  BatterySDK.swift
//  BatterySDK
//
//  Created by Dylan Le Hir on 3/6/25.
//

import UIKit
import Foundation
import OpenTelemetryApi
import OpenTelemetrySdk
import OpenTelemetryProtocolExporterGrpc
import GRPC
import NIO

@MainActor
public class BatteryManager {
    
    public init() {}
        
    public func basicConfiguration(host: String, port: Int) {
        UIDevice.current.isBatteryMonitoringEnabled = true
        let group = MultiThreadedEventLoopGroup(numberOfThreads: 1)
        let exporterChannel = ClientConnection.insecure(group: group)
            .connect(host: host, port: port)
        let meterProvider = StableMeterProviderBuilder()
            // Indique quel type de donn√©es est utilis√© (Gauge, countrer, etc...)
            // On documente la m√©trique avec un titre, une description et une version
            // Ca facilitera la lecture vers Prometheus ou Grafana
            .registerView(
                selector: InstrumentSelector.builder().setInstrument(name: "Gauge").setMeter(version: "1").build(),
                view: StableView.builder().withName(name: "Niveau de batterie de l'iPhone").withDescription(description: "On r√©cup√®re le niveau de la batterie afin de suivre son √©volution").build()
            )
            // Cr√©e un lecteur p√©riodique qui r√©cup√®re et envoie les m√©triques
            // Configuration du OTLP qui envoie ici les donn√©es vers otel-collector via gRPC
            .registerMetricReader(
                reader: StablePeriodicMetricReaderBuilder(exporter: StableOtlpMetricExporter(channel: exporterChannel)).build()
            )
            .build()

        // Enregistre le meter
        OpenTelemetry.registerStableMeterProvider(meterProvider: meterProvider)
        
        // On utilise le meterProvider pour cr√©e un meter
        let meter = meterProvider.meterBuilder(name: "MeterBatteryMonitoring").build()

        // On cr√©e une gauge ou "jauge" en fr
        var gaugeBuilder = meter.gaugeBuilder(name: "BatteryLevelGauge")
        
        // On observe la gauge
        var observableGauge = gaugeBuilder.buildWithCallback { ObservableDoubleMeasurement in
            print("D√©but de la m√©thode observableGauge")
            ObservableDoubleMeasurement.record(value: 1.0, attributes: ["test": AttributeValue.bool(true)])
            print("Fin de la m√©thode observableGauge")
        }
        
        print("Toutes les √©tapes de la configuration sont termin√©es ! üéâüö¥")
    }
}
